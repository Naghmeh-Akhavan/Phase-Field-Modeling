function [sol_cells_saved, residuals] = solve_pfm(fd, params, dof)
% Solve the PFM model without concentration
% Inputs:
%   fd:     struct containing the mesh and finite diffrence information
%   params: struct containing the parameters of the model
%   dof:    struct containing the degrees of freedom
%
% Outputs:
%   sol_cells_saved:    saved solutions of the PFM model
%   residuals:          residuals of the PFM model
%
% By Naghmeh Akhavan March 2025

% Solution to the cells (:,:,1:n) nurse cells, (:,:,end-1) oocyte, (:,:,end) cluster
sol_cells = zeros(dof.n_space,dof.n_space, dof.n_cells);
sol_cells_saved = zeros(dof.n_space,dof.n_space, dof.n_cells, dof.n_saved);
residuals = [];

% Initialize the cells
for i = 1:dof.n_cells
    sol_cells(:,:,i) = initialize_u(fd.x_mesh, fd.y_mesh, params.x_centers(i), ...
                                    params.y_centers(i), params.cell_radi(i));
end

% vectorize the solution from n_space by n_space by n_cells to n_space^2 by n_cells
sol_cells = reshape(sol_cells, [dof.n_space^2, dof.n_cells]);

for i = 1:dof.n_time
    sol_cells_old = sol_cells;
    % Compute h(u)= 3u^2-2u^3
    h_sol_cells = 3*sol_cells.^2-2*sol_cells.^3;

    % phi(u) = \sum h(u)
    phi_sum = sum(h_sol_cells(:,1:end-2),2);
    vol_cells = params.h_space^2*sum(h_sol_cells);

    % Nurse cells Evaluation
    for m = 1:dof.n_cells_nurse
        sol_cells(:,m) = sol_cells(:,m) + params.h_time*(...
            params.dval(1)*fd.laplacian*sol_cells(:,m)...
            + sol_cells(:,m).*(1-sol_cells(:,m)).*(...
                sol_cells(:,m)-0.5+(params.target_volumes(m)-vol_cells(m))...
                -params.beta(1, 1)*(phi_sum - h_sol_cells(:,m))...   %NC-NC
                -params.beta(1, 2)*h_sol_cells(:,end-1)...                              %NC-Oocyte
                -params.beta(1, 3)*h_sol_cells(:,end)...                             %NC-Clus
            - params.beta_s*fd.h_epithelial...
                +fd.laplacian*(...
            + params.eta_s*fd.h_epithelial...
            + params.eta(1, 1)*(phi_sum - h_sol_cells(:,m))...
            + params.eta(1, 2)*h_sol_cells(:,end-1)...
            + params.eta(1, 3)*h_sol_cells(:,end)...
            + params.gamma*h_sol_cells(:,m))));
    end

    % Oocyte Evaluation
    sol_cells(:,end-1) =  sol_cells(:,end-1) + params.h_time*(...
        params.dval(2)*fd.laplacian* sol_cells(:,end-1)...
        +  sol_cells(:,end-1).*(1- sol_cells(:,end-1)).*(...
            sol_cells(:,end-1)-0.5+(params.target_volumes(end-1)-vol_cells(end-1))...
            -params.beta(2, 1)*phi_sum...                               %oocy-NC
            -params.beta(2, 3)*h_sol_cells(:,end)...                             %oocy-clus
        - params.beta_s*fd.h_epithelial...
            +fd.laplacian*(...
        + params.eta_s*fd.h_epithelial...
        + params.eta(2, 1)*phi_sum...
        + params.eta(2, 3)*h_sol_cells(:,end)...
        + params.gamma*h_sol_cells(:,end-1))));

    % Cluster Evaluation
    sol_cells(:,end) =  sol_cells(:,end) + params.h_time*(...
        params.dval(3)*fd.laplacian* sol_cells(:,end)...
        +  sol_cells(:,end).*(1- sol_cells(:,end)).*(...
            sol_cells(:,end)-0.5+params.alpha*(params.target_volumes(end)-vol_cells(end))...
            -params.beta(3, 1)*phi_sum...                               %clus-NC
            -params.beta(3, 2)*h_sol_cells(:,end-1)...                             %clus-oocy
        - params.beta_s*fd.h_epithelial...
            +fd.laplacian*(...
        + params.eta_s*fd.h_epithelial...
        + params.eta(3, 1)*phi_sum...
        + params.eta(3, 2)*h_sol_cells(:,end-1)...
        + params.gamma*h_sol_cells(:,end))));

    res = norm(sol_cells - sol_cells_old)/norm(sol_cells_old);
    if mod(i, dof.n_time/dof.n_saved) == 0
        sol_cells_saved(:,:,:,i/(dof.n_time/dof.n_saved)) = reshape(sol_cells, dof.n_space, dof.n_space, dof.n_cells);
        fprintf('Time step %d of %d is saved. Relative residual %d\n', i, dof.n_time, res);
        residuals = [residuals, res];
        if res < params.tol
            break
        end
    end
end

return